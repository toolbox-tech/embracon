name: Reusable Build and Push Docker Image

on:
    workflow_call:
        inputs:
            app_context:
                required: true
                type: string
                description: 'Path to the application context (e.g., app/python, app/nodejs, app/java)'
            app_tags:
                required: true
                type: string
                description: 'Tags to apply to the Docker image (e.g., latest, stable)'
            dck_username:
                required: true
                type: string
                description: 'Docker Hub username for authentication'
            platforms:
                required: false
                type: string
                default: 'linux/amd64'
                description: 'Target platforms for Docker build (e.g., linux/amd64,linux/arm64)'
        secrets:
            dck_token:
                required: true
                description: 'Docker Hub token for authentication'
        outputs:
            image_digest:
                description: 'Docker image digest'
                value: ${{ jobs.build.outputs.digest }}
            image_tags:
                description: 'Docker image tags'
                value: ${{ jobs.build.outputs.tags }}

jobs:
    build:
        runs-on: ubuntu-latest
        outputs:
            digest: ${{ steps.build.outputs.digest }}
            tags: ${{ inputs.app_tags }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                fetch-depth: 1  # Otimiza√ß√£o: buscar apenas √∫ltimo commit

            - name: Validate inputs
              run: |
                echo "üîç Validando par√¢metros de entrada..."
                echo "Context: ${{ inputs.app_context }}"
                echo "Tags: ${{ inputs.app_tags }}"
                echo "Username: ${{ inputs.dck_username }}"
                echo "Platforms: ${{ inputs.platforms }}"
                
                # Verificar se o contexto existe
                if [ ! -d "${{ inputs.app_context }}" ]; then
                  echo "‚ùå Erro: Diret√≥rio de contexto n√£o encontrado: ${{ inputs.app_context }}"
                  exit 1
                fi
                
                # Verificar se Dockerfile existe
                if [ ! -f "${{ inputs.app_context }}/Dockerfile" ]; then
                  echo "‚ùå Erro: Dockerfile n√£o encontrado em: ${{ inputs.app_context }}/Dockerfile"
                  exit 1
                fi
                
                echo "‚úÖ Valida√ß√£o conclu√≠da com sucesso"

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ inputs.dck_username }}
                password: ${{ secrets.dck_token }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
              with:
                driver-opts: |
                  network=host

            - name: Build and push Docker image
              id: build
              uses: docker/build-push-action@v6  # Vers√£o mais recente
              with:
                context: ${{ inputs.app_context }}
                push: true
                tags: ${{ inputs.app_tags }}
                platforms: ${{ inputs.platforms }}
                cache-from: type=gha
                cache-to: type=gha,mode=max
                provenance: false  # Evita problemas de compatibilidade
                sbom: false       # Desabilita SBOM para builds mais r√°pidos

            - name: Output build summary
              run: |
                echo "üéâ Build conclu√≠do com sucesso!"
                echo "üì¶ Imagem: ${{ inputs.app_tags }}"
                echo "üîó Digest: ${{ steps.build.outputs.digest }}"
                echo "üèóÔ∏è Platforms: ${{ inputs.platforms }}"
