name: 🚀 Bump Version and Generate Changelog (Commitizen)

permissions:
  contents: write
  pull-requests: write

on: 
  workflow_dispatch:
    inputs:
      increment:
        description: 'Increment type (auto/major/minor/patch)'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - major
        - minor
        - patch
      dry_run:
        description: 'Dry run (no changes will be made)'
        required: false
        default: false
        type: boolean

jobs:
  bump-version:
    runs-on: ubuntu-latest
    name: "🚀 Bump version and create changelog with commitizen"
    steps:
      - name: 📥 Check out
        uses: actions/checkout@v4
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          fetch-depth: 0
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: 📋 Check if config exists
        run: |
          echo "Checking for Commitizen configuration..."
          if [ -f "pyproject.toml" ] && grep -q "tool.commitizen" pyproject.toml; then
            echo "✅ Found pyproject.toml with Commitizen config"
          elif [ -f ".cz.toml" ]; then
            echo "✅ Found .cz.toml config"
          else
            echo "⚠️ No Commitizen config found, creating minimal setup..."
            cat > .cz.toml << EOF
          [tool.commitizen]
          name = "cz_conventional_commits"
          version = "0.3.0"
          tag_format = "v\$version"
          changelog_file = "Secret Management/infra-secrets/CHANGELOG.md"
          changelog_start_rev = "v0.3.0"
          bump_message = "bump: version \$current_version → \$new_version"
          update_changelog_on_bump = true
          annotated_tag = true
          EOF
            echo "📝 Created .cz.toml config with version 0.3.0"
          fi
      
      - name: 🏷️ Check existing tags
        run: |
          echo "Checking existing tags..."
          git tag -l | head -10
          
          # Verificar se há tags existentes
          EXISTING_TAGS=$(git tag -l | head -1)
          if [ -z "$EXISTING_TAGS" ]; then
            echo "No tags found, creating initial tag..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            # Criar tag inicial baseada na versão atual no config
            INITIAL_VERSION="v0.3.0"
            git tag -a $INITIAL_VERSION -m "chore: initial tag $INITIAL_VERSION"
            echo "✅ Created initial tag $INITIAL_VERSION"
            
            # Fazer push da tag inicial
            git push origin $INITIAL_VERSION
            echo "✅ Pushed initial tag to remote"
          else
            echo "✅ Found existing tags:"
            git tag -l | head -5
            echo "Latest tag: $(git describe --tags --abbrev=0)"
          fi
      
      - name: 📦 Install Commitizen
        run: |
          pip install --upgrade pip
          pip install commitizen
      
      - name: 🔍 Dry Run (if requested)
        if: ${{ inputs.dry_run }}
        run: |
          echo "🔍 Performing dry run..."
          if [ "${{ inputs.increment }}" = "auto" ]; then
            cz bump --dry-run --changelog
          else
            cz bump --increment ${{ inputs.increment }} --dry-run --changelog
          fi
      
      - name: 🚀 Create bump and changelog
        if: ${{ !inputs.dry_run }}
        run: |
          # Configurar git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "🚀 Creating version bump..."
          
          # Verificar se há tags antes do bump
          if [ -z "$(git tag -l)" ]; then
            echo "❌ No tags found. This should not happen after tag creation step."
            exit 1
          fi
          
          echo "Current tags:"
          git tag -l | sort -V | tail -5
          
          # Tentar bump com --changelog apenas se há pelo menos uma tag
          if [ "${{ inputs.increment }}" = "auto" ]; then
            echo "Running: cz bump --yes --changelog"
            if ! cz bump --yes --changelog; then
              echo "⚠️ Changelog incremental failed, trying without changelog..."
              cz bump --yes
              echo "✅ Version bump completed without changelog"
            fi
          else
            echo "Running: cz bump --increment ${{ inputs.increment }} --yes --changelog"
            if ! cz bump --increment ${{ inputs.increment }} --yes --changelog; then
              echo "⚠️ Changelog incremental failed, trying without changelog..."
              cz bump --increment ${{ inputs.increment }} --yes
              echo "✅ Version bump completed without changelog"
            fi
          fi
      
      - name: � Generate changelog manually (fallback)
        if: ${{ !inputs.dry_run }}
        run: |
          echo "📋 Attempting to generate changelog manually..."
          
          # Verificar se changelog foi criado no step anterior
          CHANGELOG_FILE="Secret Management/infra-secrets/CHANGELOG.md"
          
          if [ ! -f "$CHANGELOG_FILE" ] || [ ! -s "$CHANGELOG_FILE" ]; then
            echo "Creating changelog directory..."
            mkdir -p "Secret Management/infra-secrets"
            
            echo "Generating basic changelog..."
            cat > "$CHANGELOG_FILE" << 'EOF'
          # 📋 Changelog - Azure Key Vault Terraform Module
          
          Todas as mudanças notáveis neste projeto serão documentadas neste arquivo.
          
          O formato é baseado em [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          e este projeto adere ao [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
          
          ## [Unreleased]
          
          ### ✨ Features
          - Azure Key Vault Terraform module with email-to-principal-id conversion
          - Configurable timeouts for resilient operations
          - Comprehensive documentation and troubleshooting guides
          - Validation scripts for testing
          - GitHub Actions for automated changelog generation
          
          ### 📚 Documentation  
          - Complete setup and usage documentation
          - Troubleshooting guide for common issues
          - Examples and best practices
          
          ### 🛠️ Infrastructure
          - CI/CD workflows for automation
          - Commitizen integration for standardized commits
          
          ---
          
          ## 📞 Suporte
          
          ### 📧 Contato
          - **Issues:** Use GitHub Issues para bugs e feature requests
          - **Discussões:** GitHub Discussions para dúvidas gerais
          - **Documentação:** Consulte README.md e docs/ folder
          
          ### 🔍 Links Úteis
          - [📋 Changelog Completo](https://github.com/toolbox-tech/embracon/blob/main/Secret%20Management/infra-secrets/CHANGELOG.md)
          - [🏷️ Releases](https://github.com/toolbox-tech/embracon/releases)
          - [📊 Commits](https://github.com/toolbox-tech/embracon/commits)
          
          ---
          
          <p align="center">
            <strong>🚀 Azure Key Vault Terraform Module</strong><br>
            <em>Infraestrutura como Código com Segurança e Flexibilidade</em>
          </p>
          EOF
            
            echo "✅ Basic changelog created at $CHANGELOG_FILE"
            
            # Add changelog to git
            git add "$CHANGELOG_FILE"
            if ! git diff --cached --quiet; then
              git commit -m "docs: add initial changelog"
              echo "✅ Changelog committed"
            fi
          else
            echo "✅ Changelog already exists and is not empty"
          fi
      
      - name: �📤 Push changes
        if: ${{ !inputs.dry_run }}
        run: |
          echo "📤 Pushing changes and tags..."
          git push
          git push --tags
      
      - name: 📋 Show results
        run: |
          echo "📋 Bump completed!"
          echo "Latest tag:"
          git describe --tags --abbrev=0
          echo ""
          echo "Recent commits:"
          git log --oneline -5