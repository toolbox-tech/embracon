name: Java CI  # Nome do workflow exibido no GitHub
on:
  workflow_dispatch:  # Execu√ß√£o manual
  push:
    branches:
      - main
      - feature/java-cache
  pull_request:
    paths:
      - 'app/java/**'

jobs:

  gitleaks:  # Job de verifica√ß√£o de vazamentos de credenciais
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Only required for Organizations, not personal accounts.

  build:
    runs-on: ubuntu-latest
    needs: gitleaks  # Garante que o job 'gitleaks' seja conclu√≠do antes de executar este job
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.m2/wrapper
          key: ${{ runner.os }}-maven-${{ hashFiles('app/java/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Check project structure
        run: |
          echo "Estrutura do projeto:"
          ls -la app/java/
          echo "Verificando se pom.xml existe:"
          ls -la app/java/pom.xml || echo "pom.xml n√£o encontrado"

      - name: Build with Maven
        working-directory: app/java
        run: |
          if [ -f "./mvnw" ]; then
            echo "Usando Maven Wrapper"
            chmod +x ./mvnw
            ./mvnw clean package -Dmaven.test.skip=true
          else
            echo "Usando Maven instalado no sistema"
            mvn clean package -Dmaven.test.skip=true
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: java-package-${{ github.sha }}
          path: app/java/target/*.war
          retention-days: 30

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      tags: ${{ env.IMAGE_TAGS }}
    env:
      IMAGE_TAGS: 'toolboxplayground/embracon:java-latest,toolboxplayground/embracon:java-${{ github.sha }}'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Validate inputs
        run: |
          echo "üîç Validando par√¢metros de entrada..."
          echo "Context: app/java"
          echo "Tags: ${{ env.IMAGE_TAGS }}"
          echo "Username: ${{ vars.DOCKERHUB_USERNAME }}"
          
          # Verificar se o contexto existe
          if [ ! -d "app/java" ]; then
            echo "‚ùå Erro: Diret√≥rio de contexto n√£o encontrado: app/java"
            exit 1
          fi
          
          # Verificar se Dockerfile existe
          if [ ! -f "app/java/Dockerfile" ]; then
            echo "‚ùå Erro: Dockerfile n√£o encontrado em: app/java/Dockerfile"
            exit 1
          fi
          
          echo "‚úÖ Valida√ß√£o conclu√≠da com sucesso"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: app/java
          push: true
          tags: ${{ env.IMAGE_TAGS }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

      - name: Output build summary
        run: |
          echo "üéâ Build conclu√≠do com sucesso!"
          echo "üì¶ Imagem: ${{ env.IMAGE_TAGS }}"
          echo "üîó Digest: ${{ steps.build.outputs.digest }}"
          echo "üèóÔ∏è Platforms: linux/amd64"

  trivy-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'toolboxplayground/embracon:java-latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
