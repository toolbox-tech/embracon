name: Java CI  # Nome do workflow exibido no GitHub
on:
  workflow_dispatch:  # Execução manual
  push:
    branches:
      - main
      - feature/java-cache
  pull_request:
    paths:
      - 'app/java/**'

jobs:

  gitleaks:  # Job chamado 'gitleaks'
    uses: ./.github/workflows/gitleaks.yml  # Usa um workflow reutilizável local
    with:
      gitleaks-version: 'latest'  # Passa a versão do Gitleaks como parâmetro
    secrets:
      TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Token padrão do GitHub para autenticação
      LICENSE: ${{ secrets.GITLEAKS_LICENSE }}  # Licença do Gitleaks (necessária para organizações)

  build:
    runs-on: ubuntu-latest
    needs: gitleaks  # Garante que o job 'gitleaks' seja concluído antes de executar este job
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.m2/wrapper
          key: ${{ runner.os }}-maven-${{ hashFiles('app/java/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Check project structure
        run: |
          echo "Estrutura do projeto:"
          ls -la app/java/
          echo "Verificando se pom.xml existe:"
          ls -la app/java/pom.xml || echo "pom.xml não encontrado"

      - name: Build with Maven
        working-directory: app/java
        run: |
          if [ -f "./mvnw" ]; then
            echo "Usando Maven Wrapper"
            chmod +x ./mvnw
            ./mvnw clean package -Dmaven.test.skip=true
          else
            echo "Usando Maven instalado no sistema"
            mvn clean package -Dmaven.test.skip=true
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: java-package-${{ github.sha }}
          path: app/java/target/*.war
          retention-days: 30

  docker-build:
    uses: ./.github/workflows/build.yml  # Usa um workflow reutilizável local para construir a imagem Docker
    with:
      app_context: 'app/java'  # Caminho para o contexto da aplicação Java
      app_tags: 'toolboxplayground/embracon:java-latest,toolboxplayground/embracon:java-${{ github.sha }}'  # Tags para a imagem Docker
      dck_username: ${{ vars.DOCKERHUB_USERNAME }}  # Nome de usuário do Docker Hub para autenticação
    secrets:
      dck_token: ${{ secrets.DOCKERHUB_TOKEN }}  # Token do Docker Hub
    needs: build  # Garante que o job 'build' seja concluído antes de executar este job

  trivy:  # Executa o Trivy para escanear a imagem Docker
    uses: ./.github/workflows/trivy.yml  # Usa um workflow reutilizável para o Trivy
    needs: docker-build  # Garante que o job 'docker-build' seja concluído antes de executar este job
    with:
      docker_image: toolboxplayground/embracon:java-latest  # Especifica a imagem Docker a ser escaneada