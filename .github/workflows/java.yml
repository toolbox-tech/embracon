name: Java CI  # Nome do workflow exibido no GitHub

on: [pull_request, workflow_dispatch]  # Dispara em pull requests ou execução manual

jobs:

   gitleaks:  # Job chamado 'gitleaks'
    uses: ./.github/workflows/security/gitleaks.yml  # Usa um workflow reutilizável local
    with:
      gitleaks-version: 'latest'  # Passa a versão do Gitleaks como parâmetro
    secrets:
      TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Token padrão do GitHub para autenticação
      LICENSE: ${{ secrets.GITLEAKS_LICENSE }}  # Licença do Gitleaks (necessária para organizações)

   build:
    runs-on: ubuntu-latest
    needs: gitleaks  # Garante que o job 'gitleaks' seja concluído antes de executar este job

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # - name: Cache Maven dependencies
      #   uses: ./.github/actions/cache-deps  # Usa uma ação personalizada para cache
      #   with:
      #     language: java  # Especifica que é para Java

      # - name: Build with Maven
      #   working-directory: app/java
      #   run: mvn clean package -DskipTests  # Executa o Maven para limpar e empacotar o projeto, pulando os testes

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: ./.github/actions/build  # Usa uma ação personalizada para construir e enviar a imagem Docker
        with:
          app_context: app/java
          app_tags: toolboxplayground/embracon:java-latest

   trivy:  # Executa o Trivy para escanear a imagem Docker
    uses: ./.github/workflows/security/trivy.yml  # Usa um workflow reutilizável para o Trivy
    needs: build  # Garante que o job 'build' seja concluído antes de executar este job
    with:
      docker_image: toolboxplayground/embracon:java-latest  # Especifica a imagem Docker a ser escaneada