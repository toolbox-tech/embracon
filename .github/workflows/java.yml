name: Java CI  # Nome do workflow exibido no GitHub
on:
  workflow_dispatch:  # Execução manual
  push:
    branches:
      - main
      - feature/java-cache

jobs:

  gitleaks:  # Job chamado 'gitleaks'
    uses: ./.github/workflows/gitleaks.yml  # Usa um workflow reutilizável local
    with:
      gitleaks-version: 'latest'  # Passa a versão do Gitleaks como parâmetro
    secrets:
      TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Token padrão do GitHub para autenticação
      LICENSE: ${{ secrets.GITLEAKS_LICENSE }}  # Licença do Gitleaks (necessária para organizações)

  build:
    runs-on: ubuntu-latest
    needs: gitleaks  # Garante que o job 'gitleaks' seja concluído antes de executar este job
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@017a9effdb900e5b5b2fddfb590a105619dca3c3 # v4.4.2

      - name: Check project structure
        run: |
          echo "Estrutura do projeto:"
          ls -la
          echo "Conteúdo do diretório app/java:"
          ls -la app/java/ || echo "Diretório app/java não encontrado"
          echo "Procurando por gradlew no projeto:"
          find . -name "gradlew" -type f || echo "gradlew não encontrado"

      - name: Make gradlew executable
        working-directory: app/java
        run: |
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            echo "gradlew tornado executável"
          else
            echo "gradlew não encontrado, usando gradle diretamente"
          fi

      - name: Build with Gradle
        working-directory: app/java
        run: |
          if [ -f "./gradlew" ]; then
            echo "Usando Gradle Wrapper"
            ./gradlew build
          else
            echo "Usando Gradle instalado pelo setup-gradle"
            gradle build
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: app/java/build/libs

  docker-build:
    uses: ./.github/workflows/build.yml  # Usa um workflow reutilizável local para construir a imagem Docker
    with:
      app_context: 'app/java'  # Caminho para o contexto da aplicação Java
      app_tags: 'toolboxplayground/embracon:java-latest,toolboxplayground/embracon:java'  # Tags para a imagem Docker
      dck_username: ${{ vars.DOCKERHUB_USERNAME }}  # Nome de usuário do Docker Hub para autenticação
    secrets:
      dck_token: ${{ secrets.DOCKERHUB_TOKEN }}  # Token do Docker Hub
    needs: build  # Garante que o job 'build' seja concluído antes de executar este job

  trivy:  # Executa o Trivy para escanear a imagem Docker
    uses: ./.github/workflows/trivy.yml  # Usa um workflow reutilizável para o Trivy
    needs: docker-build  # Garante que o job 'docker-build' seja concluído antes de executar este job
    with:
      docker_image: toolboxplayground/embracon:java-latest  # Especifica a imagem Docker a ser escaneada