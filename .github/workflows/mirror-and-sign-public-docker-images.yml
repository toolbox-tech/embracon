name: Mirror and Sign Public Docker Images to ACR

on:
  # Executa diariamente √† meia-noite
  # schedule:
  #   - cron: '0 0 * * *'
  # Permite execu√ß√£o manual pelo GitHub UI
  workflow_dispatch:
  # Executa quando o arquivo docker-public-images-test.json √© modificado
  push:
    branches:
      - main
    paths:
      - 'internalization-docker-images/docker-public-images-test.json'

env:
  ACR_NAME: ${{ vars.ACR_NAME }}
  RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
  PREFIX: "images/"
  DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  # As vari√°veis sens√≠veis (tokens, secrets) devem ser referenciadas diretamente onde s√£o usadas

jobs:
  mirror-public-images-with-az-acr-import:
    name: Mirror Public Docker Images to ACR (using az acr import)
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Log in to Azure Container Registry
        run: az acr login -n $ACR_NAME
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      #     docker version
          
      - name: Mirror Public Docker Images
        run: |
          echo "Using ACR: $ACR_NAME in resource group: $RESOURCE_GROUP with prefix: $PREFIX"
          
          # Ler imagens do arquivo JSON
          IMAGES=$(cat "internalization-docker-images/docker-public-images-test.json" | jq -c '.images')
          
          # Criar arquivo para rastrear imagens novas que precisam ser assinadas
          echo "" > /tmp/new_images_to_sign.txt
          
          echo "$IMAGES" | jq -c '.[]' | while read -r image; do
            REPO=$(echo "$image" | jq -r '.repository')
            TAG=$(echo "$image" | jq -r '.tag')
            # Usar o mesmo nome do reposit√≥rio de origem
            TARGET_REPO=$(echo "$image" | jq -r '.repository')
            
            # Configurar nome da imagem de destino no ACR
            TARGET_IMAGE="$PREFIX$TARGET_REPO:$TAG"
            echo "Processando imagem: $TARGET_IMAGE"
            
            # Verificar se a imagem existe no ACR
            TAG_EXISTS=false
            IMAGE_IS_NEW=false
            
            if az acr repository show-tags --name "$ACR_NAME" --repository "$PREFIX$TARGET_REPO" --output tsv 2>/dev/null | grep -q "^$TAG$"; then
              TAG_EXISTS=true
              echo "Tag $TAG encontrada no reposit√≥rio $PREFIX$TARGET_REPO do ACR. Verificando digest..."
              
              # Obter o digest da imagem no ACR usando az CLI
              echo "Obtendo digest da imagem no ACR..."
              ACR_DIGEST=$(az acr repository show --name "$ACR_NAME" --image "$PREFIX$TARGET_REPO:$TAG"  --output json | jq -r '.digest' 2>/dev/null || echo "")
              echo "ACR Digest: $ACR_DIGEST"
              
              # Obter o digest da imagem no Docker Hub usando docker buildx
              echo "Obtendo digest da imagem no Docker Hub..."
              DOCKERHUB_DIGEST=$(docker buildx imagetools inspect "docker.io/library/$REPO:$TAG" --format "{{json .Manifest}}" | jq -r '.digest' 2>/dev/null || echo "")
              echo "Docker Hub Digest: $DOCKERHUB_DIGEST"

              # Comparar os digests
              if [ -n "$ACR_DIGEST" ] && [ -n "$DOCKERHUB_DIGEST" ] && [ "$ACR_DIGEST" = "$DOCKERHUB_DIGEST" ]; then
                echo "Os digests s√£o id√™nticos ($ACR_DIGEST). N√£o √© necess√°rio atualizar a imagem."
                continue
              else
                echo "Os digests s√£o diferentes ou n√£o foi poss√≠vel obter um deles:"
                echo "ACR Digest: $ACR_DIGEST"
                echo "Docker Hub Digest: $DOCKERHUB_DIGEST"
                echo "Prosseguindo com a importa√ß√£o..."
                IMAGE_IS_NEW=true
              fi
            else
              echo "Tag $TAG n√£o encontrada no ACR. Importando a imagem..."
              IMAGE_IS_NEW=true
            fi
            
            echo "Importando imagem $REPO:$TAG para $PREFIX$TARGET_REPO:$TAG"
            
            if ! az acr import \
              --name "$ACR_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --source "docker.io/library/$REPO:$TAG" \
              --image "$PREFIX$TARGET_REPO:$TAG" \
              --username "$DOCKERHUB_USERNAME" \
              --password "${{ secrets.DOCKERHUB_TOKEN }}" \
              --force; then
              echo "Error: Failed to import $REPO:$TAG to $PREFIX$TARGET_REPO:$TAG"
            else
              echo "Imagem $REPO:$TAG importada com sucesso para $PREFIX$TARGET_REPO:$TAG"
              
              # Se a imagem √© nova ou foi atualizada, adicionar √† lista para assinatura
              if [ "$IMAGE_IS_NEW" = true ]; then
                echo "$ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG" >> /tmp/new_images_to_sign.txt
                echo "Imagem adicionada √† lista para assinatura: $ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG"
              fi
            fi
          done
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.10.0

      - name: Download Azure Key Vault key
        run: |
          echo "Baixando chave p√∫blica do Azure Key Vault..."
          
          # Baixar a chave p√∫blica do Azure Key Vault
          az keyvault key download \
            --vault-name "kms-keys" \
            --name "cosign" \
            --file cosign.pub
          
          echo "Chave p√∫blica baixada com sucesso"
          ls -la cosign.pub

      - name: Sign images with Azure Key Vault key
        run: |
          echo "Verificando e assinando imagens que n√£o est√£o assinadas com nossa chave..."
          
          # Ler todas as imagens do arquivo JSON (n√£o apenas as novas)
          IMAGES=$(cat "internalization-docker-images/docker-public-images-test.json" | jq -c '.images')
          
          # Lista para rastrear imagens que precisam ser assinadas
          echo "" > /tmp/images_to_sign.txt
          
          echo "$IMAGES" | jq -c '.[]' | while read -r image; do
            REPO=$(echo "$image" | jq -r '.repository')
            TAG=$(echo "$image" | jq -r '.tag')
            TARGET_REPO=$(echo "$image" | jq -r '.repository')
            
            # Nome completo da imagem no ACR
            ACR_IMAGE="$ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG"
            
            echo "Verificando assinatura da imagem: $ACR_IMAGE"
            
            # Verificar se a imagem j√° est√° assinada com nossa chave
            if cosign verify --key cosign.pub "$ACR_IMAGE" >/dev/null 2>&1; then
              echo "‚úÖ Imagem $ACR_IMAGE j√° est√° assinada com nossa chave. Pulando..."
            else
              echo "‚ùå Imagem $ACR_IMAGE n√£o est√° assinada com nossa chave. Adicionando √† lista para assinatura..."
              echo "$ACR_IMAGE" >> /tmp/images_to_sign.txt
            fi
          done
          
          # Verificar se h√° imagens para assinar
          if [ ! -s /tmp/images_to_sign.txt ]; then
            echo "‚úÖ Todas as imagens j√° est√£o assinadas com nossa chave. Nenhuma a√ß√£o necess√°ria."
            exit 0
          fi
          
          echo ""
          echo "üìù Imagens que ser√£o assinadas:"
          cat /tmp/images_to_sign.txt
          echo ""
          
          # Assinar as imagens que n√£o est√£o assinadas
          while IFS= read -r ACR_IMAGE; do
            if [ -n "$ACR_IMAGE" ]; then
              echo "üîê Assinando imagem: $ACR_IMAGE"
              
              # Assinar com a chave do Azure Key Vault
              if ! cosign sign --key azurekms://kms-keys.vault.azure.net/cosign --yes "$ACR_IMAGE"; then
                echo "‚ùå Erro: Falha ao assinar $ACR_IMAGE"
              else
                echo "‚úÖ Imagem $ACR_IMAGE assinada com sucesso"
                
                # Verificar a assinatura rec√©m-criada
                echo "üîç Verificando assinatura..."
                if cosign verify --key cosign.pub "$ACR_IMAGE" >/dev/null 2>&1; then
                  echo "‚úÖ Assinatura verificada com sucesso"
                else
                  echo "‚ö†Ô∏è Aviso: Falha na verifica√ß√£o da assinatura"
                fi
              fi
              echo ""
            fi
          done < /tmp/images_to_sign.txt
          
          echo "üéâ Processo de assinatura conclu√≠do."
          
          echo "Processo de assinatura conclu√≠do."


  cleanup-images-not-in-json:
    name: Cleanup Images Not in JSON
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        run: az acr login -n $ACR_NAME
      - name: Remove Images Not in JSON
        run: |
          echo "Using ACR: $ACR_NAME in resource group: $RESOURCE_GROUP with prefix: $PREFIX"
          
          # Remover imagens que n√£o est√£o no JSON
          echo "Verificando e removendo imagens que n√£o est√£o no arquivo JSON..."
          
          # Cria arquivos tempor√°rios com as imagens e reposit√≥rios v√°lidos listados no JSON
          echo "Criando listas de imagens e reposit√≥rios v√°lidos..."
          jq -r '.images[] | "\(.repository):\(.tag)"' internalization-docker-images/docker-public-images-test.json > /tmp/valid_images.txt
          jq -r '.images[] | .repository' internalization-docker-images/docker-public-images-test.json | sort -u > /tmp/valid_repos.txt
          
          # Listar todos os reposit√≥rios no ACR
          echo "Listando reposit√≥rios no ACR..."
          az acr repository list --name $ACR_NAME -o tsv | grep "^$PREFIX" | while read -r repo; do
            # Remove o prefixo para comparar com o repository do JSON
            BASE_REPO=$(echo $repo | sed "s/^$PREFIX//")
            
            # Verifica se o reposit√≥rio est√° na lista de reposit√≥rios v√°lidos
            if ! grep -q "^$BASE_REPO$" /tmp/valid_repos.txt; then
              echo "O reposit√≥rio $repo n√£o est√° no arquivo JSON. Removendo o reposit√≥rio inteiro..."
              
              # Remover o reposit√≥rio completo
              if ! az acr repository delete --name $ACR_NAME --repository $repo --yes; then
                echo "Erro: Falha ao remover o reposit√≥rio $repo"
                echo "Continuando com o pr√≥ximo item..."
              fi
              
              # Pula para o pr√≥ximo reposit√≥rio
              continue
            fi
            
            echo "Verificando imagens no reposit√≥rio $repo..."
            
            # Listar todas as tags neste reposit√≥rio
            az acr repository show-tags --name $ACR_NAME --repository $repo -o tsv | while read -r tag; do
              # Verifica se a combina√ß√£o reposit√≥rio:tag est√° na lista de imagens v√°lidas
                if ! grep -q "^$BASE_REPO:$tag$" /tmp/valid_images.txt; then
                echo "A imagem $repo:$tag n√£o est√° no arquivo JSON. Removendo..."
                
                # Remover a imagem
                if ! az acr repository delete --name $ACR_NAME --image "$repo:$tag" --yes; then
                  echo "Erro: Falha ao remover $repo:$tag"
                  echo "Continuando com o pr√≥ximo item..."
                fi
              else
                echo "A imagem $repo:$tag est√° na lista de imagens v√°lidas. Mantendo."
              fi
            done
          done
          
          echo "Processo de sincroniza√ß√£o conclu√≠do."