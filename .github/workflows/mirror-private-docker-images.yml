name: Mirror Private Docker Images to ACR

on:
  # Executa diariamente às 2 da manhã
  schedule:
    - cron: '0 2 * * *'
  # Permite execução manual pelo GitHub UI
  workflow_dispatch:
  # Executa quando o arquivo docker-private-images.json é modificado
  push:
    branches:
      - main
    paths:
      - 'internalization-docker-images/docker-private-images.json'

jobs:
  # mirror-private-images:
  #   name: Mirror Private Docker Images to ACR
  #   runs-on: ubuntu-latest
    
  #   # Permissões necessárias para autenticação OIDC
  #   permissions:
  #     id-token: write
  #     contents: read
    
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
      
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ vars.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
      
  #     - name: Azure Login via OIDC
  #       uses: azure/login@v2
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  #     - name: Log in to Azure Container Registry
  #       run: az acr login -n ${{ vars.ACR_NAME }}

  #     - name: Mirror Private Docker Images
  #       run: |
  #         ACR_NAME="${{ vars.ACR_NAME }}"
  #         RESOURCE_GROUP="${{ vars.RESOURCE_GROUP }}"
  #         PREFIX="embracon-"
          
  #         echo "Using ACR: $ACR_NAME in resource group: $RESOURCE_GROUP"
          
  #         # Verificar se o arquivo existe
  #         if [ ! -f "internalization-docker-images/docker-private-images.json" ]; then
  #           echo "Arquivo de imagens privadas não encontrado. Pulando importação."
  #           exit 0
  #         fi
          
  #         # Ler imagens do arquivo JSON
  #         IMAGES=$(cat "internalization-docker-images/docker-private-images.json" | jq -c '.images')
          
  #         echo "$IMAGES" | jq -c '.[]' | while read -r image; do
  #           REPO=$(echo "$image" | jq -r '.repository')
  #           TAG=$(echo "$image" | jq -r '.tag')
  #           TARGET_REPO=$(echo "$image" | jq -r '.targetRepository')
  #           REGISTRY=$(echo "$image" | jq -r '.registry')
            
  #           echo "Processing $REPO:$TAG to $PREFIX$TARGET_REPO:$TAG"
            
  #           # Verificar se a imagem já existe no ACR
  #           TARGET_IMAGE="$PREFIX$TARGET_REPO:$TAG"
  #           echo "Verificando se a imagem $TARGET_IMAGE já existe no ACR..."
            
  #           # Verificar primeiro pela tag
  #           TAG_EXISTS=false
  #           if az acr repository show-tags --name "$ACR_NAME" --repository "$PREFIX$TARGET_REPO" --output tsv 2>/dev/null | grep -q "^$TAG$"; then
  #             TAG_EXISTS=true
  #             echo "Tag $TAG encontrada no repositório $PREFIX$TARGET_REPO. Verificando digest..."
              
  #             # Obter o digest da imagem de origem usando manifest inspect (método mais eficiente)
  #             echo "Obtendo digest da imagem de origem $REGISTRY/$REPO:$TAG"
              
  #             # Método 1: Usar docker manifest inspect (não requer download completo da imagem)
  #             echo "Tentando obter digest via docker manifest inspect..."
  #             # Habilitar recursos experimentais do Docker CLI
  #             export DOCKER_CLI_EXPERIMENTAL=enabled
              
  #             docker manifest inspect $REGISTRY/$REPO:$TAG > /dev/null 2>&1
  #             if [ $? -eq 0 ]; then
  #               # Usar grep + awk em vez de jq para extrair o digest
  #               SOURCE_DIGEST=$(docker manifest inspect $REGISTRY/$REPO:$TAG | grep digest | head -n 1 | awk '{print $2}' | tr -d ',"' || echo "")
  #             else
  #               SOURCE_DIGEST=""
  #             fi
              
  #             # Se falhar, tentar métodos alternativos que requerem pull da imagem
  #             if [ -z "$SOURCE_DIGEST" ]; then
  #               echo "Manifest inspect falhou. Tentando obter digest através do pull da imagem..."
  #               echo "Pulling image from registry: $REGISTRY/$REPO:$TAG"
  #               docker pull $REGISTRY/$REPO:$TAG > /dev/null
                
  #               # Tentar obter o digest de várias maneiras
  #               SOURCE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $REGISTRY/$REPO:$TAG 2>/dev/null | awk -F '@' '{print $2}' || echo "")
  #               if [ -z "$SOURCE_DIGEST" ]; then
  #                 # Tentar método alternativo para obter digest
  #                 SOURCE_DIGEST=$(docker inspect $REGISTRY/$REPO:$TAG | jq -r '.[0].RepoDigests[0]' 2>/dev/null | awk -F '@' '{print $2}' || echo "")
  #               fi
  #             fi
              
  #             # Verificar se obteve um digest válido
  #             if [ -n "$SOURCE_DIGEST" ]; then
  #               echo "Digest da imagem de origem: $SOURCE_DIGEST"
  #               # Obter o digest da imagem no ACR
  #               ACR_DIGEST=$(az acr repository show --name "$ACR_NAME" --image "$PREFIX$TARGET_REPO:$TAG" --query "digest" -o tsv 2>/dev/null)
                
  #               if [ "$SOURCE_DIGEST" = "$ACR_DIGEST" ]; then
  #                 echo "A imagem $TARGET_IMAGE já existe no ACR e tem o mesmo digest ($SOURCE_DIGEST). Pulando importação."
  #                 continue
  #               else
  #                 echo "A imagem $TARGET_IMAGE existe, mas o digest é diferente. Source: $SOURCE_DIGEST, ACR: $ACR_DIGEST. Atualizando..."
  #               fi
  #             else
  #               echo "Aviso: Não foi possível obter o digest da imagem de origem. Procedendo com a importação da imagem."
  #               # Continuamos para importar a imagem mesmo sem conseguir o digest
  #             fi
  #           fi
            
  #           echo "A imagem $TARGET_IMAGE não existe no ACR ou precisa ser atualizada. Procedendo com importação."
            
  #           # Pull da imagem do registro privado
  #           echo "Pulling image from registry: $REGISTRY/$REPO:$TAG"
  #           if ! docker pull $REGISTRY/$REPO:$TAG; then
  #             echo "Error: Failed to pull $REGISTRY/$REPO:$TAG"
  #             continue
  #           fi
            
  #           # Tag para o ACR
  #           echo "Tagging for ACR: $ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG"
  #           if ! docker tag $REGISTRY/$REPO:$TAG $ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG; then
  #             echo "Error: Failed to tag $ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG"
  #             continue
  #           fi
            
  #           # Push para o ACR
  #           echo "Pushing to ACR: $ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG"
  #           if ! docker push $ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG; then
  #             echo "Error: Failed to push $ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG"
  #           fi
            
  #           # Limpar imagens locais para economizar espaço
  #           echo "Cleaning up local images"
  #           docker rmi $REGISTRY/$REPO:$TAG $ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG || true
  #         done
  
  mirror-private-images-with-az-acr-import:
    name: Mirror Private Docker Images to ACR (using az acr import)
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        run: az acr login -n ${{ vars.ACR_NAME }}
        
      - name: Mirror Private Docker Images
        run: |
          ACR_NAME="${{ vars.ACR_NAME }}"
          RESOURCE_GROUP="${{ vars.RESOURCE_GROUP }}"
          PREFIX="embracon-"
          
          echo "Using ACR: $ACR_NAME in resource group: $RESOURCE_GROUP"
          
          # Verificar se o arquivo existe
          if [ ! -f "internalization-docker-images/docker-private-images.json" ]; then
            echo "Arquivo de imagens privadas não encontrado. Pulando importação."
            exit 0
          fi
          
          # Ler imagens do arquivo JSON
          IMAGES=$(cat "internalization-docker-images/docker-private-images.json" | jq -c '.images')
          
          echo "$IMAGES" | jq -c '.[]' | while read -r image; do
            REPO=$(echo "$image" | jq -r '.repository')
            TAG=$(echo "$image" | jq -r '.tag')
            TARGET_REPO=$(echo "$image" | jq -r '.targetRepository')
            REGISTRY=$(echo "$image" | jq -r '.registry')
            
            # Verificar se a imagem já existe no ACR
            TARGET_IMAGE="$PREFIX$TARGET_REPO:$TAG"
            echo "Verificando se a imagem $TARGET_IMAGE já existe no ACR..."
            
            # Verificar primeiro pela tag
            TAG_EXISTS=false
            if az acr repository show-tags --name "$ACR_NAME" --repository "$PREFIX$TARGET_REPO" --output tsv 2>/dev/null | grep -q "^$TAG$"; then
              TAG_EXISTS=true
              echo "Tag $TAG encontrada no repositório $PREFIX$TARGET_REPO. Verificando digest..."
              
              # Para verificar o digest no caso do import, primeiro tentamos usar manifest inspect
              echo "Obtendo digest da imagem de origem $REGISTRY/$REPO:$TAG"
              
              # Método 1: Usar docker manifest inspect (não requer download completo da imagem)
              echo "Tentando obter digest via docker manifest inspect..."
              # Habilitar recursos experimentais do Docker CLI
              export DOCKER_CLI_EXPERIMENTAL=enabled
              
              docker manifest inspect $REGISTRY/$REPO:$TAG > /dev/null 2>&1
              if [ $? -eq 0 ]; then
                # Usar grep + awk em vez de jq para extrair o digest
                SOURCE_DIGEST=$(docker manifest inspect $REGISTRY/$REPO:$TAG | grep digest | head -n 1 | awk '{print $2}' | tr -d ',"' || echo "")
              else
                SOURCE_DIGEST=""
              fi
              
              # Se falhar, tentar métodos alternativos que requerem pull da imagem
              if [ -z "$SOURCE_DIGEST" ]; then
                echo "Manifest inspect falhou. Tentando obter digest através do pull da imagem..."
                echo "Pulling image from registry: $REGISTRY/$REPO:$TAG"
                docker pull $REGISTRY/$REPO:$TAG > /dev/null
                
                # Tentar obter o digest de várias maneiras
                SOURCE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $REGISTRY/$REPO:$TAG 2>/dev/null | awk -F '@' '{print $2}' || echo "")
                if [ -z "$SOURCE_DIGEST" ]; then
                  # Tentar método alternativo para obter digest
                  SOURCE_DIGEST=$(docker inspect $REGISTRY/$REPO:$TAG | jq -r '.[0].RepoDigests[0]' 2>/dev/null | awk -F '@' '{print $2}' || echo "")
                fi
              fi
              
              # Verificar se obteve um digest válido
              if [ -n "$SOURCE_DIGEST" ]; then
                echo "Digest da imagem de origem: $SOURCE_DIGEST"
                # Obter o digest da imagem no ACR
                ACR_DIGEST=$(az acr repository show --name "$ACR_NAME" --image "$PREFIX$TARGET_REPO:$TAG" --query "digest" -o tsv 2>/dev/null)
                
                if [ "$SOURCE_DIGEST" = "$ACR_DIGEST" ]; then
                  echo "A imagem $TARGET_IMAGE já existe no ACR e tem o mesmo digest ($SOURCE_DIGEST). Pulando importação."
                  # Limpar imagem temporária
                  docker rmi $REGISTRY/$REPO:$TAG > /dev/null 2>&1 || true
                  continue
                else
                  echo "A imagem $TARGET_IMAGE existe, mas o digest é diferente. Source: $SOURCE_DIGEST, ACR: $ACR_DIGEST. Atualizando..."
                  # Limpar imagem temporária
                  docker rmi $REGISTRY/$REPO:$TAG > /dev/null 2>&1 || true
                fi
              else
                echo "Aviso: Não foi possível obter o digest da imagem de origem. Procedendo com a importação da imagem."
                # Continuamos com a importação mesmo sem conseguir o digest
              fi
            fi
            
            echo "A imagem $TARGET_IMAGE não existe no ACR ou precisa ser atualizada. Procedendo com importação."
            echo "Importing $REPO:$TAG to $PREFIX$TARGET_REPO:$TAG"
            
            if ! az acr import \
              --name "$ACR_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --source "$REGISTRY/$REPO:$TAG" \
              --image "$PREFIX$TARGET_REPO:$TAG" \
              --username ${{ vars.DOCKERHUB_USERNAME }} \
              --password ${{ secrets.DOCKERHUB_TOKEN }} \
              --force; then
              echo "Error: Failed to import $REPO:$TAG to $PREFIX$TARGET_REPO:$TAG"
            fi
          done
