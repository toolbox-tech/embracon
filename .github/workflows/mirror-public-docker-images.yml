name: Mirror Public Docker Images to ACR

on:
  # Executa diariamente à meia-noite
  schedule:
    - cron: '0 0 * * *'
  # Permite execução manual pelo GitHub UI
  workflow_dispatch:
  # Executa quando o arquivo docker-public-images.json é modificado
  push:
    branches:
      - main
    paths:
      - 'internalization-docker-images/docker-public-images.json'

jobs:
  mirror-public-images:
    name: Mirror Public Docker Images to ACR
    runs-on: ubuntu-latest
    
    # Permissões necessárias para autenticação OIDC
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        run: az acr login -n ${{ vars.ACR_NAME }}

      - name: Mirror Public Docker Images
        run: |
          ACR_NAME="${{ vars.ACR_NAME }}"
          RESOURCE_GROUP="${{ vars.RESOURCE_GROUP }}"
          PREFIX="embracon-"
          
          echo "Using ACR: $ACR_NAME in resource group: $RESOURCE_GROUP"
          
          # Ler imagens do arquivo JSON
          IMAGES=$(cat "internalization-docker-images/docker-public-images.json" | jq -c '.images')
          
            echo "$IMAGES" | jq -c '.[]' | while read -r image; do
            REPO=$(echo "$image" | jq -r '.repository')
            TAG=$(echo "$image" | jq -r '.tag')
            TARGET_REPO=$(echo "$image" | jq -r '.targetRepository')
            
            echo "Processing $REPO:$TAG to $PREFIX$TARGET_REPO:$TAG"
            
            # Verificar se a imagem já existe no ACR
            TARGET_IMAGE="$PREFIX$TARGET_REPO:$TAG"
            echo "Verificando se a imagem $TARGET_IMAGE já existe no ACR..."
            
            if az acr repository show-tags --name "$ACR_NAME" --repository "$PREFIX$TARGET_REPO" --output tsv 2>/dev/null | grep -q "^$TAG$"; then
              echo "A imagem $TARGET_IMAGE já existe no ACR. Pulando importação."
              continue
            fi
            
            echo "A imagem $TARGET_IMAGE não existe no ACR. Procedendo com importação."
            
            # Pull da imagem do Docker Hub
            echo "Pulling image from Docker Hub: docker.io/library/$REPO:$TAG"
            if ! docker pull docker.io/library/$REPO:$TAG; then
              echo "Error: Failed to pull docker.io/library/$REPO:$TAG"
              continue
            fi
            
            # Tag para o ACR
            echo "Tagging for ACR: $ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG"
            if ! docker tag docker.io/library/$REPO:$TAG $ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG; then
              echo "Error: Failed to tag $ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG"
              continue
            fi
            
            # Push para o ACR
            echo "Pushing to ACR: $ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG"
            if ! docker push $ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG; then
              echo "Error: Failed to push $ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG"
            fi
            
            # Limpar imagens locais para economizar espaço
            echo "Cleaning up local images"
            docker rmi docker.io/library/$REPO:$TAG $ACR_NAME.azurecr.io/$PREFIX$TARGET_REPO:$TAG || true
            done
  mirror-public-images-with-az-acr-import:
    name: Mirror Public Docker Images to ACR (using az acr import)
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        run: az acr login -n ${{ vars.ACR_NAME }}
      - name: Mirror Public Docker Images
        run: |
          ACR_NAME="${{ vars.ACR_NAME }}"
          RESOURCE_GROUP="${{ vars.RESOURCE_GROUP }}"
          PREFIX="embracon-"
          
          echo "Using ACR: $ACR_NAME in resource group: $RESOURCE_GROUP"
          
          # Ler imagens do arquivo JSON
          IMAGES=$(cat "internalization-docker-images/docker-public-images.json" | jq -c '.images')
          
          echo "$IMAGES" | jq -c '.[]' | while read -r image; do
            REPO=$(echo "$image" | jq -r '.repository')
            TAG=$(echo "$image" | jq -r '.tag')
            TARGET_REPO=$(echo "$image" | jq -r '.targetRepository')
            
            # Verificar se a imagem já existe no ACR
            TARGET_IMAGE="$PREFIX$TARGET_REPO:$TAG"
            echo "Verificando se a imagem $TARGET_IMAGE já existe no ACR..."
            
            if az acr repository show-tags --name "$ACR_NAME" --repository "$PREFIX$TARGET_REPO" --output tsv 2>/dev/null | grep -q "^$TAG$"; then
              echo "A imagem $TARGET_IMAGE já existe no ACR. Pulando importação."
              continue
            fi
            
            echo "A imagem $TARGET_IMAGE não existe no ACR. Procedendo com importação."
            echo "Importing $REPO:$TAG to $PREFIX$TARGET_REPO:$TAG"
            
            if ! az acr import \
              --name "$ACR_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --source "docker.io/library/$REPO:$TAG" \
              --image "$PREFIX$TARGET_REPO:$TAG" \
              --username ${{ vars.DOCKERHUB_USERNAME }} \
              --password ${{ secrets.DOCKERHUB_TOKEN }} \
              --force; then
              echo "Error: Failed to import $REPO:$TAG to $PREFIX$TARGET_REPO:$TAG"
            fi
          done