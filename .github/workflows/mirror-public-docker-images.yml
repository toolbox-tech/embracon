name: Mirror Public Docker Images to Multi-Cloud (Azure ACR & Oracle OCR)

# ==================================================================================
# WORKFLOW MULTI-CLOUD - AZURE & ORACLE
# ==================================================================================
# Este workflow espelha imagens Docker públicas para AMBAS as clouds:
# 1. Azure Container Registry (ACR)
# 2. Oracle Container Registry (OCR)
# 
# Jobs executam em paralelo para máxima eficiência
# ==================================================================================

on:
  # Executa diariamente à meia-noite
  # schedule:
  #   - cron: '0 0 * * *'
  # Permite execução manual pelo GitHub UI
  workflow_dispatch:
  # Executa quando o arquivo docker-public-images-test.json é modificado
  push:
    branches:
      - main
    paths:
      - 'internalization-docker-images/docker-public-images-test.json'

env:
  # CONFIGURAÇÕES COMPARTILHADAS
  PREFIX: "images/"
  DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
  
  # AZURE CONTAINER REGISTRY (ACR) - ATIVO
  ACR_NAME: ${{ vars.ACR_NAME }}
  RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
  
  # ORACLE CONTAINER REGISTRY (OCR) - COMENTADO (DESCOMENTE QUANDO PRONTO)
  # OCR_REGION: ${{ vars.OCR_REGION }}           # e.g., us-ashburn-1
  # OCR_NAMESPACE: ${{ vars.OCR_NAMESPACE }}     # Seu namespace Oracle
  # OCR_USERNAME: ${{ vars.OCR_USERNAME }}       # Username Oracle
  # COMPARTMENT_OCID: ${{ vars.COMPARTMENT_OCID }} # OCID do compartment

jobs:
  mirror-public-images-with-az-acr-import:
    name: Mirror Public Docker Images to ACR (using az acr import)
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # AZURE LOGIN - Para usar Azure
      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          # enable-AzPSSession: true

      # ORACLE LOGIN - Para usar Oracle, substitua por:
      # - name: Setup Oracle CLI
      #   run: |
      #     bash -c "$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)"
      #     mkdir -p ~/.oci
      #     echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
      #     echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/private_key.pem
      #     chmod 600 ~/.oci/private_key.pem

      # AZURE ACR LOGIN
      - name: Log in to Azure Container Registry
        run: az acr login -n $ACR_NAME
      
      # ORACLE OCR LOGIN - Para usar Oracle, substitua por:
      # - name: Login to Oracle Container Registry
      #   run: |
      #     echo "${{ secrets.OCR_PASSWORD }}" | docker login $OCR_REGION.ocir.io -u "$OCR_NAMESPACE/$OCR_USERNAME" --password-stdin
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      #     docker version
          
      - name: Mirror Public Docker Images
        run: |
          echo "Using ACR: $ACR_NAME in resource group: $RESOURCE_GROUP with prefix: $PREFIX"
          
          # Ler imagens do arquivo JSON
          IMAGES=$(cat "internalization-docker-images/docker-public-images-test.json" | jq -c '.images')
          
          echo "$IMAGES" | jq -c '.[]' | while read -r image; do
            REPO=$(echo "$image" | jq -r '.repository')
            TAG=$(echo "$image" | jq -r '.tag')
            # Usar o mesmo nome do repositório de origem
            TARGET_REPO=$(echo "$image" | jq -r '.repository')
            
            # Configurar nome da imagem de destino no ACR
            TARGET_IMAGE="$PREFIX$TARGET_REPO:$TAG"
            echo "Processando imagem: $TARGET_IMAGE"
            
            # AZURE ACR - Verificar se a imagem existe
            TAG_EXISTS=false
            if az acr repository show-tags --name "$ACR_NAME" --repository "$PREFIX$TARGET_REPO" --output tsv 2>/dev/null | grep -q "^$TAG$"; then
              TAG_EXISTS=true
              echo "Tag $TAG encontrada no repositório $PREFIX$TARGET_REPO do ACR. Verificando digest..."
              
              # ORACLE OCR - Para usar Oracle, substitua por:
              # if oci artifacts container image list --compartment-id $COMPARTMENT_OCID --repository-name "$PREFIX$REPO" | jq -r '.data[].version' | grep -q "^$TAG$"; then
              
              # Obter o digest da imagem no ACR usando az CLI
              echo "Obtendo digest da imagem no ACR..."
              ACR_DIGEST=$(az acr repository show --name "$ACR_NAME" --image "$PREFIX$TARGET_REPO:$TAG"  --output json | jq -r '.digest' 2>/dev/null || echo "")
              echo "ACR Digest: $ACR_DIGEST"
              
              # Obter o digest da imagem no Docker Hub usando docker buildx
              echo "Obtendo digest da imagem no Docker Hub..."
              DOCKERHUB_DIGEST=$(docker buildx imagetools inspect "docker.io/library/$REPO:$TAG" --format "{{json .Manifest}}" | jq -r '.digest' 2>/dev/null || echo "")
              echo "Docker Hub Digest: $DOCKERHUB_DIGEST"

              # Comparar os digests
              if [ -n "$ACR_DIGEST" ] && [ -n "$DOCKERHUB_DIGEST" ] && [ "$ACR_DIGEST" = "$DOCKERHUB_DIGEST" ]; then
                echo "Os digests são idênticos ($ACR_DIGEST). Não é necessário atualizar a imagem."
                continue
              else
                echo "Os digests são diferentes ou não foi possível obter um deles:"
                echo "ACR Digest: $ACR_DIGEST"
                echo "Docker Hub Digest: $DOCKERHUB_DIGEST"
                echo "Prosseguindo com a importação..."
              fi
            else
              echo "Tag $TAG não encontrada no ACR. Importando a imagem..."
            fi
            
            echo "Importando imagem $REPO:$TAG para $PREFIX$TARGET_REPO:$TAG"
            
            # AZURE ACR IMPORT
            if ! az acr import \
              --name "$ACR_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --source "docker.io/library/$REPO:$TAG" \
              --image "$PREFIX$TARGET_REPO:$TAG" \
              --username "$DOCKERHUB_USERNAME" \
              --password "${{ secrets.DOCKERHUB_TOKEN }}" \
              --force; then
              echo "Error: Failed to import $REPO:$TAG to $PREFIX$TARGET_REPO:$TAG"
            else
              echo "Imagem $REPO:$TAG importada com sucesso para $PREFIX$TARGET_REPO:$TAG"
            fi
            
            # ORACLE OCR IMPORT - Para usar Oracle, substitua a seção acima por:
            # SOURCE_IMAGE="docker.io/library/$REPO:$TAG"
            # TARGET_IMAGE="$OCR_REGION.ocir.io/$OCR_NAMESPACE/$PREFIX$REPO:$TAG"
            # 
            # if docker pull "$SOURCE_IMAGE"; then
            #   docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE"
            #   if docker push "$TARGET_IMAGE"; then
            #     echo "✅ Imagem $REPO:$TAG espelhada com sucesso"
            #   else
            #     echo "❌ Erro ao fazer push de $TARGET_IMAGE"
            #   fi
            #   docker rmi "$SOURCE_IMAGE" "$TARGET_IMAGE" || true
            # else
            #   echo "❌ Erro ao fazer pull de $SOURCE_IMAGE"
            # fi
          done

  # ==================================================================================
  # JOB ORACLE - COMENTADO (DESCOMENTE QUANDO PRONTO PARA USAR)
  # ==================================================================================
  # mirror-public-images-to-oracle:
  #   name: Mirror Public Docker Images to Oracle Container Registry
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #   
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #     
  #     - name: Setup Oracle CLI
  #       run: |
  #         # Instalar OCI CLI
  #         bash -c "$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)" -- --accept-all-defaults
  #         echo "$HOME/bin" >> $GITHUB_PATH
  #         
  #         # Configurar credenciais
  #         mkdir -p ~/.oci
  #         echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
  #         echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/private_key.pem
  #         chmod 600 ~/.oci/private_key.pem
  #         
  #         # Testar conexão
  #         oci iam region list --output table
  #     
  #     - name: Login to Oracle Container Registry
  #       run: |
  #         echo "${{ secrets.OCR_PASSWORD }}" | docker login $OCR_REGION.ocir.io -u "$OCR_NAMESPACE/$OCR_USERNAME" --password-stdin
  #     
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ env.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #         
  #     - name: Mirror Public Docker Images to Oracle
  #       run: |
  #         echo "Using Oracle Container Registry in region: $OCR_REGION with namespace: $OCR_NAMESPACE"
  #         
  #         # Ler imagens do arquivo JSON
  #         IMAGES=$(cat "internalization-docker-images/docker-public-images-test.json" | jq -c '.images')
  #         
  #         echo "$IMAGES" | jq -c '.[]' | while read -r image; do
  #           REPO=$(echo "$image" | jq -r '.repository')
  #           TAG=$(echo "$image" | jq -r '.tag')
  #           
  #           # Nome da imagem de origem
  #           SOURCE_IMAGE="docker.io/library/$REPO:$TAG"
  #           
  #           # Nome da imagem de destino no Oracle Container Registry
  #           TARGET_IMAGE="$OCR_REGION.ocir.io/$OCR_NAMESPACE/$PREFIX$REPO:$TAG"
  #           
  #           echo "🔄 Espelhando $SOURCE_IMAGE para $TARGET_IMAGE"
  #           
  #           # Verificar se a imagem já existe no Oracle
  #           if oci artifacts container image list \
  #               --compartment-id "$COMPARTMENT_OCID" \
  #               --repository-name "$PREFIX$REPO" \
  #               --output json 2>/dev/null | jq -r '.data[].version' | grep -q "^$TAG$"; then
  #             echo "✅ Imagem $REPO:$TAG já existe no Oracle Container Registry"
  #             continue
  #           fi
  #           
  #           # Pull da imagem pública
  #           if docker pull "$SOURCE_IMAGE"; then
  #             # Tag para Oracle Container Registry
  #             docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE"
  #             
  #             # Push para Oracle Container Registry
  #             if docker push "$TARGET_IMAGE"; then
  #               echo "✅ Imagem $REPO:$TAG espelhada com sucesso para Oracle"
  #             else
  #               echo "❌ Erro ao fazer push de $TARGET_IMAGE"
  #             fi
  #             
  #             # Limpeza local
  #             docker rmi "$SOURCE_IMAGE" "$TARGET_IMAGE" || true
  #           else
  #             echo "❌ Erro ao fazer pull de $SOURCE_IMAGE"
  #           fi
  #         done
  # ==================================================================================

  cleanup-images-not-in-json:
    name: Cleanup Images Not in JSON
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          # enable-AzPSSession: true

      - name: Log in to Azure Container Registry
        run: az acr login -n $ACR_NAME
      - name: Remove Images Not in JSON
        run: |
          echo "Using ACR: $ACR_NAME in resource group: $RESOURCE_GROUP with prefix: $PREFIX"
          
          # Remover imagens que não estão no JSON
          echo "Verificando e removendo imagens que não estão no arquivo JSON..."
          
          # Cria arquivos temporários com as imagens e repositórios válidos listados no JSON
          echo "Criando listas de imagens e repositórios válidos..."
          jq -r '.images[] | "\(.repository):\(.tag)"' internalization-docker-images/docker-public-images-test.json > /tmp/valid_images.txt
          jq -r '.images[] | .repository' internalization-docker-images/docker-public-images-test.json | sort -u > /tmp/valid_repos.txt
          
          # Listar todos os repositórios no ACR
          echo "Listando repositórios no ACR..."
          az acr repository list --name $ACR_NAME -o tsv | grep "^$PREFIX" | while read -r repo; do
            # Remove o prefixo para comparar com o repository do JSON
            # Usar substituição de string nativa do bash em vez de sed
            BASE_REPO=${repo#$PREFIX}
            
            # Verifica se o repositório está na lista de repositórios válidos
            if ! grep -q "^$BASE_REPO$" /tmp/valid_repos.txt; then
              echo "O repositório $repo não está no arquivo JSON. Removendo o repositório inteiro..."
              
              # Remover o repositório completo
              if ! az acr repository delete --name $ACR_NAME --repository $repo --yes; then
                echo "Erro: Falha ao remover o repositório $repo"
                echo "Continuando com o próximo item..."
              fi
              
              # Pula para o próximo repositório
              continue
            fi
            
            echo "Verificando imagens no repositório $repo..."
            
            # Listar todas as tags neste repositório
            az acr repository show-tags --name $ACR_NAME --repository $repo -o tsv | while read -r tag; do
              # Verifica se a combinação repositório:tag está na lista de imagens válidas
                if ! grep -q "^$BASE_REPO:$tag$" /tmp/valid_images.txt; then
                echo "A imagem $repo:$tag não está no arquivo JSON. Removendo..."
                
                # Remover a imagem
                if ! az acr repository delete --name $ACR_NAME --image "$repo:$tag" --yes; then
                  echo "Erro: Falha ao remover $repo:$tag"
                  echo "Continuando com o próximo item..."
                fi
              else
                echo "A imagem $repo:$tag está na lista de imagens válidas. Mantendo."
              fi
            done
          done
          
          echo "Processo de sincronização concluído."

# ==================================================================================
# WORKFLOW MULTI-CLOUD - AZURE & ORACLE
# ==================================================================================
# Este workflow está preparado para espelhar imagens Docker públicas para:
# ✅ 1. Azure Container Registry (ACR) - ATIVO
# ⏸️  2. Oracle Container Registry (OCR) - COMENTADO (pronto para ativar)
# 
# Para ativar Oracle: descomente as seções marcadas com "ORACLE"
# ==================================================================================
# 
# SECRETS ATIVOS (Azure):
# - AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_SUBSCRIPTION_ID
# - DOCKERHUB_TOKEN
# 
# SECRETS PARA ORACLE (quando ativar):
# - OCI_CONFIG, OCI_PRIVATE_KEY, OCR_PASSWORD
# 
# VARIABLES ATIVAS:
# - DOCKERHUB_USERNAME, ACR_NAME, RESOURCE_GROUP
# 
# VARIABLES PARA ORACLE (quando ativar):
# - OCR_REGION, OCR_NAMESPACE, OCR_USERNAME, COMPARTMENT_OCID
# ==================================================================================