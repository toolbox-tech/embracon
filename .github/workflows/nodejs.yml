name: Node CI  # Nome do workflow exibido no GitHub

on: [pull_request, workflow_dispatch]  # Dispara em pull requests ou execução manual

jobs:

  test:  # Job chamado 'test'
    uses: ./.github/workflows/reusable.yml  # Usa um workflow reutilizável local
    with:
      gitleaks-version: 'latest'  # Passa a versão do Gitleaks como parâmetro
    secrets:
      TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Token padrão do GitHub para autenticação
      LICENSE: ${{ secrets.GITLEAKS_LICENSE }}  # Licença do Gitleaks (necessária para organizações)

  build:  # Job chamado 'build'
    runs-on: ubuntu-latest  # Executa em uma VM Ubuntu mais recente

    steps:
    - name: Checkout code  # Passo para baixar o código do repositório
      uses: actions/checkout@v3

    - name: Cache npm dependencies  # Passo para cachear dependências do npm
      uses: ./.github/actions/cache-deps  # Usa uma ação personalizada para cache
      with:
        language: nodejs  # Especifica que é para Node.js
        # path: app/nodejs/node_modules  # Caminho das dependências
        # key: ${{ runner.os }}-node-${{ hashFiles('app/nodejs/package-lock.json') }}  # Chave única baseada no SO e no hash do package-lock.json
        # restore-keys: |
        #   ${{ runner.os }}-node-  # Chave de fallback para restaurar cache parcial

    - name: Install Dependencies  # Instala as dependências do Node.js
      working-directory: app/nodejs  # Define o diretório de trabalho
      run: npm install

    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v3

    # - name: Build and push Docker image
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: app/nodejs  # Define o contexto de construção do Docker
    #     push: false # Não faz push da imagem para um registro
    #     load: true  # Carrega a imagem no ambiente atual
    #     tags: nodejs:latest
    #     cache-from: type=local,src=/tmp/.buildx-cache
    #     # cache-from: type=gha
    #     cache-to: type=local,dest=/tmp/.buildx-cache-new
    #     # cache-to: type=gha,mode=max
    - name: Restore Docker cache
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image
      working-directory: app/nodejs  # Define o diretório de trabalho
      run: |
        docker buildx build \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache-new \
          -t nodejs-ci-cd .


    - name: Save Docker cache
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache-new
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Move Docker cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        
    # - name: Install Trivy  # Instala o Trivy (scanner de vulnerabilidades)
    #   run: |
    #     curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh  # Baixa e executa o instalador
    #     sudo mv ./bin/trivy /usr/local/bin/trivy  # Move o binário para o PATH

    # - name: Run Trivy to scan Docker image for vulnerabilities  # Executa o Trivy para escanear a imagem Docker
    #   run: |
    #     trivy image nodejs-ci-cd  # Escaneia a imagem 'nodejs-ci-cd'