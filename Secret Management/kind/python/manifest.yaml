# Este é um exemplo de manifesto do Kubernetes para criar um cluster Kind, configurar um operador de External Secrets e fazer o deploy de uma aplicação Python que consome uma secret do Azure Key Vault (AKV).
apiVersion: apps/v1
kind: Deployment
metadata:
 name: python-hello-world
spec:
 replicas: 1
 selector:
   matchLabels:
     app: python-hello-world
 template:
   metadata:
     labels:
       app: python-hello-world
   spec:
     containers:
     - name: python-hello-world
       image: localhost/hello-world-python:latest
       imagePullPolicy: IfNotPresent
       ports:
       - containerPort: 8080
       resources:
         requests:
           cpu: "250m"
           memory: "256Mi"
         limits:
           cpu: "500m"
           memory: "512Mi"
       env:
         - name: SEGREDO_AKV
           valueFrom:
             secretKeyRef:
               name: minha-secret-no-k8s
               key: minha-chave-no-k8s

---
apiVersion: v1
kind: Service
metadata:
 name: python-hello-world-service
spec:
 type: NodePort
 ports:
 - port: 8080
   nodePort: 30000   #Altere a porta do node o quanto você quiser em um range de 30000-32767
 selector:
   app: python-hello-world

---
# Este é um exemplo de manifesto do ExternalSecret para consumir uma secret do Azure Key Vault (AKV) e criar uma secret no Kubernetes.
# Certifique-se de que o ClusterSecretStore já esteja configurado e referenciado corretamente.
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: exemplo-akv
  namespace: default
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: azure-kv-store
    kind: ClusterSecretStore
  target:
    name: minha-secret-no-k8s
    creationPolicy: Owner
  data:
    - secretKey: minha-chave-no-k8s
      remoteRef:
        key: nome-da-secret-no-akv
