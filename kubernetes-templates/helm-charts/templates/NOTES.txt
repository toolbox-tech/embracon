1. Obtenha a URL da aplicação executando estes comandos:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "embracon-app.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTA: Pode levar alguns minutos para o LoadBalancer ficar disponível.
           Você pode monitorar o status executando 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "embracon-app.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "embracon-app.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "embracon-app.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visite http://127.0.0.1:8080 para usar sua aplicação"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Verificar o status dos pods:
  kubectl get pods -l "app.kubernetes.io/name={{ include "embracon-app.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -n {{ .Release.Namespace }}

3. Verificar logs da aplicação:
  kubectl logs -l "app.kubernetes.io/name={{ include "embracon-app.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -n {{ .Release.Namespace }}

{{- if .Values.healthChecks.enabled }}
4. Health Checks configurados:
{{- if .Values.healthChecks.liveness.enabled }}
  ✓ Liveness Probe: {{ .Values.healthChecks.liveness.type }} em {{ if eq .Values.healthChecks.liveness.type "httpGet" }}{{ .Values.healthChecks.liveness.httpGet.path }}:{{ .Values.healthChecks.liveness.httpGet.port }}{{ else if eq .Values.healthChecks.liveness.type "tcpSocket" }}porta {{ .Values.healthChecks.liveness.tcpSocket.port }}{{ else }}comando exec{{ end }}
{{- end }}
{{- if .Values.healthChecks.readiness.enabled }}
  ✓ Readiness Probe: {{ .Values.healthChecks.readiness.type }} em {{ if eq .Values.healthChecks.readiness.type "httpGet" }}{{ .Values.healthChecks.readiness.httpGet.path }}:{{ .Values.healthChecks.readiness.httpGet.port }}{{ else if eq .Values.healthChecks.readiness.type "tcpSocket" }}porta {{ .Values.healthChecks.readiness.tcpSocket.port }}{{ else }}comando exec{{ end }}
{{- end }}
{{- if .Values.healthChecks.startup.enabled }}
  ✓ Startup Probe: {{ .Values.healthChecks.startup.type }} em {{ if eq .Values.healthChecks.startup.type "httpGet" }}{{ .Values.healthChecks.startup.httpGet.path }}:{{ .Values.healthChecks.startup.httpGet.port }}{{ else if eq .Values.healthChecks.startup.type "tcpSocket" }}porta {{ .Values.healthChecks.startup.tcpSocket.port }}{{ else }}comando exec{{ end }}
{{- end }}
{{- end }}

{{- if .Values.autoscaling.hpa.enabled }}
5. HPA (Horizontal Pod Autoscaler) ativo:
  ✓ Min Replicas: {{ .Values.autoscaling.hpa.minReplicas }}
  ✓ Max Replicas: {{ .Values.autoscaling.hpa.maxReplicas }}
  ✓ Target CPU: {{ .Values.autoscaling.hpa.targetCPUUtilizationPercentage }}%
  {{- if .Values.autoscaling.hpa.targetMemoryUtilizationPercentage }}
  ✓ Target Memory: {{ .Values.autoscaling.hpa.targetMemoryUtilizationPercentage }}%
  {{- end }}
  
  Para verificar status do HPA:
  kubectl get hpa {{ include "embracon-app.fullname" . }} -n {{ .Release.Namespace }}
{{- end }}

{{- if .Values.autoscaling.vpa.enabled }}
6. VPA (Vertical Pod Autoscaler) ativo:
  ✓ Update Mode: {{ .Values.autoscaling.vpa.updateMode }}
  
  Para verificar recomendações do VPA:
  kubectl describe vpa {{ include "embracon-app.fullname" . }}-vpa -n {{ .Release.Namespace }}
{{- end }}

{{- if .Values.monitoring.enabled }}
7. Monitoring configurado:
  ✓ Métricas disponíveis em /metrics na porta 9090
  {{- if .Values.monitoring.serviceMonitor.enabled }}
  ✓ ServiceMonitor criado para Prometheus
  {{- end }}
{{- end }}

{{- if .Values.podDisruptionBudget.enabled }}
8. Pod Disruption Budget ativo:
  ✓ Configurado para manter disponibilidade durante updates
{{- end }}
