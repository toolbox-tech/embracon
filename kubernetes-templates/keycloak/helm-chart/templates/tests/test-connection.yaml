apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "keycloak.fullname" . }}-test"
  labels:
    {{- include "keycloak.labels" . | nindent 4 }}
    test-type: helm-test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  containers:
    - name: keycloak-test
      image: curlimages/curl:8.5.0
      command:
        - sh
        - -c
        - |
          set -e
          echo "Testing Keycloak connectivity..."
          
          # Test HTTP health endpoint
          curl -f -s {{ if .Values.networking.httpsRequired }}https{{ else }}http{{ end }}://{{ include "keycloak.fullname" . }}.{{ .Values.global.namespace | default .Release.Namespace }}.svc.cluster.local:{{ if .Values.networking.httpsRequired }}{{ .Values.service.httpsPort }}{{ else }}{{ .Values.service.port }}{{ end }}/health || (
            echo "‚ùå Health check failed"
            exit 1
          )
          
          echo "‚úÖ Health check passed"
          
          # Test readiness endpoint
          curl -f -s {{ if .Values.networking.httpsRequired }}https{{ else }}http{{ end }}://{{ include "keycloak.fullname" . }}.{{ .Values.global.namespace | default .Release.Namespace }}.svc.cluster.local:{{ if .Values.networking.httpsRequired }}{{ .Values.service.httpsPort }}{{ else }}{{ .Values.service.port }}{{ end }}/health/ready || (
            echo "‚ùå Readiness check failed"
            exit 1
          )
          
          echo "‚úÖ Readiness check passed"
          
          # Test admin console access
          response=$(curl -s -w "%{http_code}" -o /dev/null {{ if .Values.networking.httpsRequired }}https{{ else }}http{{ end }}://{{ include "keycloak.fullname" . }}.{{ .Values.global.namespace | default .Release.Namespace }}.svc.cluster.local:{{ if .Values.networking.httpsRequired }}{{ .Values.service.httpsPort }}{{ else }}{{ .Values.service.port }}{{ end }}/admin/)
          
          if [ "$response" -eq 200 ] || [ "$response" -eq 302 ] || [ "$response" -eq 401 ]; then
            echo "‚úÖ Admin console accessible (HTTP $response)"
          else
            echo "‚ùå Admin console not accessible (HTTP $response)"
            exit 1
          fi
          
          # Test OIDC well-known endpoint
          {{- if .Values.rbac.oidcIntegration.enabled }}
          curl -f -s {{ if .Values.networking.httpsRequired }}https{{ else }}http{{ end }}://{{ include "keycloak.fullname" . }}.{{ .Values.global.namespace | default .Release.Namespace }}.svc.cluster.local:{{ if .Values.networking.httpsRequired }}{{ .Values.service.httpsPort }}{{ else }}{{ .Values.service.port }}{{ end }}/realms/{{ .Values.rbac.oidcIntegration.realm }}/.well-known/openid_configuration || (
            echo "‚ùå OIDC well-known endpoint failed"
            exit 1
          )
          
          echo "‚úÖ OIDC well-known endpoint accessible"
          {{- end }}
          
          echo "üéâ All tests passed!"

---
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "keycloak.fullname" . }}-database-test"
  labels:
    {{- include "keycloak.labels" . | nindent 4 }}
    test-type: database-test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  containers:
    - name: database-test
      image: postgres:15-alpine
      env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "keycloak.fullname" . }}-secrets
              key: database-password
      command:
        - sh
        - -c
        - |
          set -e
          echo "Testing database connectivity..."
          
          # Test database connection
          pg_isready -h {{ include "keycloak.databaseHost" . }} -p {{ .Values.database.port }} -U {{ .Values.database.username }} || (
            echo "‚ùå Database connection failed"
            exit 1
          )
          
          echo "‚úÖ Database connection successful"
          
          # Test database authentication
          psql -h {{ include "keycloak.databaseHost" . }} -p {{ .Values.database.port }} -U {{ .Values.database.username }} -d {{ .Values.database.name }} -c "SELECT version();" > /dev/null || (
            echo "‚ùå Database authentication failed"
            exit 1
          )
          
          echo "‚úÖ Database authentication successful"
          
          # Check if Keycloak tables exist
          table_count=$(psql -h {{ include "keycloak.databaseHost" . }} -p {{ .Values.database.port }} -U {{ .Values.database.username }} -d {{ .Values.database.name }} -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name LIKE '%keycloak%' OR table_name LIKE 'realm%' OR table_name LIKE 'client%' OR table_name LIKE 'user_%';" | xargs)
          
          if [ "$table_count" -gt 0 ]; then
            echo "‚úÖ Keycloak database schema detected ($table_count tables)"
          else
            echo "‚ö†Ô∏è  No Keycloak tables found (might be first run)"
          fi
          
          echo "üéâ Database tests completed!"

---
{{- if .Values.rbac.oidcIntegration.enabled }}
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "keycloak.fullname" . }}-oidc-test"
  labels:
    {{- include "keycloak.labels" . | nindent 4 }}
    test-type: oidc-test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "3"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  serviceAccountName: {{ include "keycloak.serviceAccountName" . }}
  containers:
    - name: oidc-test
      image: curlimages/curl:8.5.0
      command:
        - sh
        - -c
        - |
          set -e
          echo "Testing OIDC integration..."
          
          # Get service account token
          TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          
          # Test Kubernetes API access with service account token
          curl -k -H "Authorization: Bearer $TOKEN" https://kubernetes.default.svc/api/v1/namespaces || (
            echo "‚ùå Service account token validation failed"
            exit 1
          )
          
          echo "‚úÖ Service account token validation successful"
          
          # Test OIDC discovery endpoint
          OIDC_URL="{{ include "keycloak.oidcIssuerUrl" . }}"
          curl -f -s "$OIDC_URL/.well-known/openid_configuration" | grep -q "issuer" || (
            echo "‚ùå OIDC discovery endpoint failed"
            exit 1
          )
          
          echo "‚úÖ OIDC discovery endpoint accessible"
          
          # Test OIDC certs endpoint
          curl -f -s "$OIDC_URL/protocol/openid-connect/certs" | grep -q "keys" || (
            echo "‚ùå OIDC certs endpoint failed"
            exit 1
          )
          
          echo "‚úÖ OIDC certs endpoint accessible"
          
          echo "üéâ OIDC tests completed!"
{{- end }}

---
{{- if .Values.monitoring.prometheus.enabled }}
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "keycloak.fullname" . }}-metrics-test"
  labels:
    {{- include "keycloak.labels" . | nindent 4 }}
    test-type: metrics-test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "4"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  containers:
    - name: metrics-test
      image: curlimages/curl:8.5.0
      command:
        - sh
        - -c
        - |
          set -e
          echo "Testing Prometheus metrics..."
          
          # Test metrics endpoint
          curl -f -s http://{{ include "keycloak.fullname" . }}.{{ .Values.global.namespace | default .Release.Namespace }}.svc.cluster.local:9000/metrics | head -20 || (
            echo "‚ùå Metrics endpoint failed"
            exit 1
          )
          
          echo "‚úÖ Metrics endpoint accessible"
          
          # Check for common Keycloak metrics
          metrics_response=$(curl -s http://{{ include "keycloak.fullname" . }}.{{ .Values.global.namespace | default .Release.Namespace }}.svc.cluster.local:9000/metrics)
          
          echo "$metrics_response" | grep -q "keycloak" && echo "‚úÖ Keycloak metrics found" || echo "‚ö†Ô∏è  Keycloak-specific metrics not found"
          echo "$metrics_response" | grep -q "jvm" && echo "‚úÖ JVM metrics found" || echo "‚ö†Ô∏è  JVM metrics not found"
          echo "$metrics_response" | grep -q "process" && echo "‚úÖ Process metrics found" || echo "‚ö†Ô∏è  Process metrics not found"
          
          echo "üéâ Metrics tests completed!"
{{- end }}
