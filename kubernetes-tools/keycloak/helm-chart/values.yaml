# Default values for keycloak-kubernetes
# This is a YAML-formatted file.

# Global settings
global:
  # Namespace onde o Keycloak será instalado
  namespace: keycloak
  # Storage class para volumes persistentes
  storageClass: ""
  # Image pull policy
  imagePullPolicy: IfNotPresent

# Configurações da imagem do Keycloak
image:
  repository: quay.io/keycloak/keycloak
  tag: "23.0.3"
  pullPolicy: IfNotPresent
  # Secrets para pull de imagens privadas
  pullSecrets: []

# Configurações do administrador inicial
auth:
  # Usuário administrador principal
  adminUser: admin
  # Senha do administrador (ALTERE EM PRODUÇÃO!)
  adminPassword: "KeycloakAdmin123!"
  # Usar secret existente para credenciais
  existingSecret: ""
  # Chaves no secret para username e password
  usernameKey: username
  passwordKey: password

# Configurações do banco de dados
database:
  # Tipo de banco: postgres, mysql, mariadb, mssql, oracle
  vendor: postgres
  # Host do banco de dados
  host: ""
  # Porta do banco (padrão será definida baseada no vendor)
  port: ""
  # Nome do banco de dados
  name: keycloak
  # Schema/namespace do banco
  schema: public
  # Usuário do banco
  username: keycloak
  # Senha do banco (ALTERE EM PRODUÇÃO!)
  password: "KeycloakDB123!"
  # Secret existente com credenciais do banco
  existingSecret: ""
  # Chaves no secret
  usernameKey: username
  passwordKey: password

# PostgreSQL como banco interno (desenvolvimento)
postgresql:
  # Habilitar PostgreSQL interno
  enabled: true
  auth:
    # Usuário do PostgreSQL
    username: keycloak
    # Senha do PostgreSQL (ALTERE EM PRODUÇÃO!)
    password: "PostgresKeycloak123!"
    # Banco de dados
    database: keycloak
  # Configurações de recursos
  primary:
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 500m
    persistence:
      enabled: true
      size: 8Gi

# Configurações de rede e proxy
networking:
  # Hostname público do Keycloak
  hostname: keycloak.local
  # Porta HTTP interna
  httpPort: 8080
  # Porta HTTPS interna
  httpsPort: 8443
  # Configuração de proxy (edge, reencrypt, passthrough)
  proxyMode: edge
  # Habilitar HTTP (apenas para desenvolvimento)
  httpEnabled: true
  # Certificados TLS personalizados
  tls:
    # Secret com certificados TLS
    secretName: ""
    # Certificado (se não usar secret)
    crt: ""
    # Chave privada (se não usar secret)
    key: ""

# Configurações do Service
service:
  type: ClusterIP
  # Porta externa do serviço
  httpPort: 80
  httpsPort: 443
  # Anotações do serviço
  annotations: {}
  # Labels do serviço
  labels: {}

# Configurações do Ingress
ingress:
  enabled: true
  # Classe do ingress controller
  className: nginx
  annotations:
    # Tamanho do buffer para proxying
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    # Body size para uploads
    nginx.ingress.kubernetes.io/proxy-body-size: "32m"
    # SSL redirect
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  # Hosts do ingress
  hosts:
    - host: keycloak.local
      paths:
        - path: /
          pathType: Prefix
  # Configuração TLS
  tls: []
  #  - secretName: keycloak-tls
  #    hosts:
  #      - keycloak.local

# Configurações de recursos do pod
resources:
  requests:
    memory: 512Mi
    cpu: 500m
  limits:
    memory: 2Gi
    cpu: 1000m

# Configurações de health checks
healthChecks:
  # Readiness probe
  readiness:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    path: /realms/master
  # Liveness probe
  liveness:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 1
    path: /realms/master

# Configurações de escalonamento
replicaCount: 1

# Estratégia de deploy
deploymentStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

# Pod Security Context
podSecurityContext:
  seccompProfile:
    type: RuntimeDefault

# Service Account
serviceAccount:
  # Criar service account
  create: true
  # Nome do service account
  name: ""
  # Anotações
  annotations: {}

# Configurações específicas do Keycloak
keycloak:
  # Realm padrão para Kubernetes
  defaultRealm: kubernetes
  
  # Configurações de log
  logging:
    level: INFO
    
  # Configurações de cache
  cache:
    enabled: true
    type: ispn
    
  # Configurações de métricas
  metrics:
    enabled: false
    
  # Configurações extras do Keycloak
  extraEnv:
    # Configuração de proxy
    - name: KC_PROXY
      value: "edge"
    # Configuração de hostname
    - name: KC_HOSTNAME_STRICT
      value: "false"
    # Configuração de health checks
    - name: KC_HEALTH_ENABLED
      value: "true"
    # Configuração de métricas
    - name: KC_METRICS_ENABLED
      value: "false"
    
  # Argumentos de inicialização
  startupArgs:
    - "start"
    - "--optimized"
    
  # Configurações extras via ConfigMap
  extraConfig: |
    # Configurações adicionais do Keycloak podem ser adicionadas aqui
    
# Configurações de RBAC do Kubernetes
rbac:
  # Habilitar integração com RBAC
  enabled: true
  
  # Configurações do OIDC para API Server
  oidc:
    issuerUrl: "http://keycloak.local/realms/kubernetes"
    clientId: kubernetes
    clientSecret: "kubernetes-client-secret"
    usernameClaim: preferred_username
    groupsClaim: groups
    
  # ClusterRoles e RoleBindings pré-configurados
  clusterRoles:
    # Admins do cluster
    clusterAdmins:
      enabled: true
      groups:
        - "/admins/cluster-admins"
        
    # Admins de namespace
    namespaceAdmins:
      enabled: true
      groups:
        - "/admins/namespace-admins"
      namespaces:
        - development
        - staging
        
    # Desenvolvedores
    developers:
      enabled: true
      groups:
        - "/developers"
      permissions:
        - apiGroups: [""]
          resources: ["pods", "services", "configmaps", "secrets"]
          verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
        - apiGroups: ["apps"]
          resources: ["deployments", "replicasets"]
          verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
          
    # Visualizadores
    viewers:
      enabled: true
      groups:
        - "/viewers"
      permissions:
        - apiGroups: [""]
          resources: ["*"]
          verbs: ["get", "list", "watch"]
        - apiGroups: ["apps"]
          resources: ["*"]
          verbs: ["get", "list", "watch"]

# Configurações de inicialização do realm
realmImport:
  enabled: true
  # Realm configuration (será criado via Job)
  realm:
    realm: kubernetes
    displayName: "Kubernetes Cluster"
    enabled: true
    sslRequired: external
    registrationAllowed: false
    resetPasswordAllowed: true
    editUsernameAllowed: false
    bruteForceProtected: true
    # Configurações de grupos padrão
    groups:
      - name: admins
        subGroups:
          - name: cluster-admins
          - name: namespace-admins
      - name: developers
        subGroups:
          - name: dev-team
          - name: qa-team
      - name: viewers
        subGroups:
          - name: read-only
    # Cliente OIDC para Kubernetes
    clients:
      - clientId: kubernetes
        name: "Kubernetes Cluster"
        enabled: true
        protocol: openid-connect
        publicClient: false
        bearerOnly: false
        standardFlowEnabled: true
        directAccessGrantsEnabled: true
        secret: kubernetes-client-secret
        redirectUris:
          - "http://localhost:8000/*"
          - "https://kubernetes-dashboard.local/*"
        webOrigins:
          - "https://kubernetes-dashboard.local"

# Configurações de backup
backup:
  enabled: false
  schedule: "0 2 * * *"
  retention: 7

# Configurações de monitoramento
monitoring:
  # Service Monitor para Prometheus
  serviceMonitor:
    enabled: false
    namespace: monitoring
    labels: {}
    scrapeInterval: 30s
    path: /metrics
    
  # Grafana Dashboard
  grafanaDashboard:
    enabled: false
    namespace: monitoring
